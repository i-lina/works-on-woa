---
import { type CollectionEntry, getCollection } from "astro:content";
import ProjectLayout from "../../layouts/ProjectLayout.astro";
import { exec } from "node:child_process";
import { promisify } from "node:util";
import { getEntry } from "astro:content";
import { getEntries } from "astro:content";

const execAsync = promisify(exec);

export async function getStaticPaths() {
  const projects = await getCollection("games");
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}

const { slug } = Astro.params;

let date: Date | null = null;

const reports = await getCollection("user_reports", ({ data }: any) => {
  return data.project.slug === slug;
});

type Props = CollectionEntry<"games">;
let project;
if (import.meta.env.SSR) {
  project = await getEntry("games", slug);
} else {
  project = Astro.props;
  try {
    const { stdout } = await execAsync(
      `git log -1 --pretty="format:%ci" ${process.cwd()}/src/content/games/${slug}.md`
    );
    date = new Date(stdout);
  } catch (e) {
    throw new Error(`Failed to parse date for ${slug}.md.\n${e}`);
  }
}
---

<ProjectLayout project={project} date={date} reports={reports} type="games" />
