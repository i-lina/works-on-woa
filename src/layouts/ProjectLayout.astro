---
import { getEntry, type CollectionEntry } from "astro:content";
import BaseHead from "../components/Common/BaseHead.astro";
import Footer from "../components/Common/Footer.astro";
import Search from "../components/Search/Search.astro";
import ProjectDetails from "../components/Projects/ProjectDetails.astro";

type Props = CollectionEntry<"projects"> & { date: Date | null };

const { data, render, date  } = Astro.props;

const { Content } = await render();

// extract generic fields
const textFields = Object.entries(data).filter(
  ([key]) =>
    key !== "icon" && key !== "name" && key !== "categories" && key !== "link"
) as [string, string][];

// extract special fields
const {link, icon, name, categories, type } = data;




// get category data from references
const appCategoryPromises = categories.map(async (category) =>
  getEntry("applications_categories", category.slug) 
);
const gamesCategoryPromises = categories.map(async (category) =>
  getEntry("games_categories", category.slug) 
);
const categoriesData = type === "applications" ? await Promise.all(appCategoryPromises) : await Promise.all(gamesCategoryPromises)

// construct field array
const fields = [
  ...textFields.map((field) => ({
    key: field[0],
    value: field[1],
    type: "text",
  })),
  {
    key: "link",
    value: link,
    type: "link",
  },
  {
    key: "category",
    value: categoriesData,
    type: "array",
  },
] 

export type ProjectFields = typeof fields;

// sort fields
const sortOrder = ["compatibility", "category", "versionFrom", "link", "notes"];

const sortKeys = sortOrder.reduce((obj: any, item: string, index: number) => {
  return {
    ...obj,
    [item]: index,
  };
}, {});

fields.sort((a, b) => sortKeys[a.key] - sortKeys[b.key]);

// list filtering fields

const filters = ["category", "compatibility", "type"];
// check path


---

<html lang="en">
  <head>
    <BaseHead
      title={name + " | Windows on Arm Ready Applications"}
      description={`Windows on Arm compatibility details for ${name}`}
    />
  </head>

  <body class="min-h-screen flex flex-col">
    <main class="max-w-5xl mx-auto px-2 sm:px-5 w-full"> 
      <Search shouldRedirect={true} type={type}/>
      <section
        data-pagefind-body
        class="flex flex-col items-center p-1 sm:pb-10 pt-0"
      >
        <h1 class="font-bold text-3xl px-0 self-start">
          {name}
        </h1>
        <span class="hidden" data-pagefind-sort="name"
          >{name.toLowerCase()}</span
        >
        <ProjectDetails
          fields={fields}
          icon={icon}
          categoriesData={categoriesData}
          filters={filters}
          Content={Content}
          name={name}
          type={type}
        />
        <p class="w-full py-6">
          Last updated {
            import.meta.env.SSR ? 
            <i>- not available on private staging site</i> :
            date?.toLocaleDateString("en-gb", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })
          }
        </p>
      </section>
    </main>
    <Footer />
  </body>
</html>
